from .llm_response import OptimizerParameters

def get_system_prompt():
    """
    The system prompt to feed the LLM.
    """
    return f"""You are an expert magnet engineer."""

def get_initial_prompt(optimizer_params: OptimizerParameters):
    """
    The initial prompt to feed the LLM.
    
    args:
        optimizer_params: The optimizer parameters used for the initial configuration.
    """
    return f"""We are creating connector curves connecting two parts of a magnet model using an optimizer. Our goal is to analyse connector curves created by an optimizer, assess their "goodness", and propose new optimizer parameters to create a "good" curve. The following describes the procedure to follow:

1) We analyse a given curve to be "bad" if one(1) or more of the following criteria hold, and "good" otherwise:

- The curve exhibits obvious unrealizable deformations. An unrealizable deformation is a part of the curve not smooth but having an abrupt kink.

- The curve crosses itself or other parts of the magnet.

- The length of the curve is unreasonably long for the points to be connected.

- The connection of the curve to the two parts to be connected is not smooth.

2) Below are examples of how curves are either "good" or "bad". Study them carefully.

- The curve in the picture marked "A" is "bad". In this curve, there is an unrealizable deformation.

- The curve in the picture marked "B" is "bad". This curve crosses another part of the magnet model.

- The curve in the picture marked "D" is "bad". This curve is unreasonably long and crosses another part of the magnet model.

- The curve in the picture marked "E" is "bad". The connection of the curve to one of the points to be connected is abrupt.

- The curve in the picture marked "F" is "good". The curve satisfies none of the conditions for a "bad" curve.

- The connection of the curve to the startpoint in the picture marked "G" is smooth. If all other criteria suffice, the corresponding curve is "good".

3) The optimizer generating curves has the following parameters:

- order. This parameter defines the complexity of the curve generated.
- ell. This parameter defines the requested length of the curve.
- rbendmin. This parameter defines the requested minimum curvature radius for the curve.
- t1. This parameter defines the tolerance for minimizing edge regressions. Egde regressions cause unrealizable deformations.

4) The optimizer parameters are always given in a list with the format [order, ell, rbendmin, t1]. An example is [7, 100, 15, -8].

5) The following is how to select new optimizer parameters based on given optimizer parameters and a "bad" curve generated by the optimizer using those parameters.

- We know which criteria made the curve "bad" from our previous assessment.

- We analyse the given optimizer parameters.

- We analyse what effect changing each parameter would have on the curve.

- We select new optimizer parameters to make the curve "good".

6) The following is how to create a "good" curve given a curve created by the optimizer. 

- First, we analyse the pictures of the given curve and assess the "goodness" of the curve. The curve is either "good" or "bad".

We state that we are now going to assess the "goodness" of the curve.

We analyse each criterion for a "bad" curve.

We state that we are finished assessing the "goodness" of the curve.

We state for each "bad" curve criterion whether the curve suffices this criterion or not.

We state if the curve is "good" or "bad".

- Next we decide how to proceed based on the assessment of the "goodness".

If the curve is "good", we are done and do not proceed with the rest of the procedure. We state "DONE" to indicate that we are done.

If the curve is "bad", we proceed. We state that we will proceed.

- Next we propose a new list of optimizer parameters to create a "good" curve.

We state that we are now going to select new optimizer parameters.

We analyse what criteria made the curve "bad". 

We analyse the given list of optimizer parameters that created the given curve. 

We change the optimizer parameters to create a "good" curve.

We state that we are finished selecting parameters.

We state the new optimizer parameters.

The above finishes our procedure.

Please remember the following:

- After finding a criterion making the curve "bad", also analyse the remaining criteria.

- The final answer will be the either "DONE" or the new optimizer parameters.

- The final answer is the end of the message.


In the picture marked "Z", there are the two parts of the magnet model needing a connector.

The pictures marked "0a", "0b", and "0c" depict the curve connecting these two parts generated by the optimizer using the optimizer parameters [{optimizer_params.order}, {optimizer_params.ell}, {optimizer_params.rbendmin}, {optimizer_params.t1}], where each picture depicts the following:

- "0a" depicts a general overview of the curve.

- "0b" depicts a close-up view where the curve meets one of the parts to be connected.

- "0c" depicts a close-up view where the curve meets the other part to be connected.

Please analyse the connector curve created by the optimizer, assess its "goodness", and propose new optimizer parameters to create a "good" curve. Use the procedure above. Please think carefully."""
    
def get_reprompt(optimizer_params: OptimizerParameters, index: int):
    """
    The re-prompt to present the curve generated by the previous optimizer parameters.
    
    args:
        optimizer_params: The optimizer parameters used for the previous configuration.
        index: The index of the images.
    """
    return f"""The pictures marked "{index}a", "{index}b", and "{index}c" depict the curve connecting these two parts generated by the optimizer using the selected optimizer parameters [{optimizer_params.order}, {optimizer_params.ell}, {optimizer_params.rbendmin}, {optimizer_params.t1}], where each picture depicts the following:

- "{index}a" depicts a general overview of the curve.

- "{index}b" depicts a close-up view where the curve meets one of the parts to be connected.

- "{index}c" depicts a close-up view where the curve meets the other part to be connected.

Please analyse the connector curve created by the optimizer, assess its "goodness", and propose new optimizer parameters to create a "good" curve. Use the procedure above. Take into account all optimizer parameter lists selected so far. Please think carefully."""